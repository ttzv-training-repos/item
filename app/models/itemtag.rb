class Itemtag < ApplicationRecord
  has_many :template_taggings, dependent: :destroy
  has_many :templates, through: :template_taggings

  def associate_with(template_id)
    TemplateTagging.upsert(template_id: template_id, itemtag_id: self.id)
  end

  def self.create_from_tag_string(tag_string)
    p tag_string
    Itemtag.create(
      name: tag_string,
      display_name: Parsers::ItemtagParser.tag_display_name(tag_string),
      description: "This tag was autogenerated"
    )
  end

  #if template_id provided applies custom mask instead
  def apply_mask(user_id, template_id=nil)
    if template_id
      tag_mask = TemplateTagging.find_by(
        template_id: template_id,
        itemtag_id: self.id
      )
      return "" if tag_mask.nil?
      return "" if tag_mask.tag_custom_mask.nil?
      tag_mask = tag_mask.tag_custom_mask.value
    else
      tag_mask = self.default_value_mask 
    end
    return "" if tag_mask.empty?

    mask_hash = JSON.parse(tag_mask, symbolize_names: true)

    attribute = mask_hash[:attribute].split("#")[1];

    user = AdUser.find(user_id)

    init_val = user[attribute]
    methods = mask_hash.keys - [:attribute]
    masked_tag = Parsers::MaskParser.new(init_val)
      methods.each do |m|
        options = mask_hash[m]
        masked_tag.send(m, options)
      end
    masked_tag.text
  end

end
